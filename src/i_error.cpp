//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
// Copyright(C) 2020-2022 Ethan Watson
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//

#include "i_error.h"

#include "i_log.h"
#include "i_system.h"
#include "i_terminal.h"
#include "i_video.h"

#include "m_argv.h"
#include "m_container.h"
#include "m_misc.h"

#include <SDL2/SDL.h>

#include <exception>
#include <atomic>
#include <semaphore>
#include <thread>

static uint8_t endoom_error[] =
{
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x7F, 0x52, 0x7F, 0x75, 0x7F,
	0x6D, 0x7F, 0x20, 0x7F, 0x61, 0x7F, 0x6E, 0x7F, 0x64, 0x7F, 0x20, 0x7F, 0x52, 0x7F, 0x61, 0x7F,
	0x69, 0x7F, 0x73, 0x7F, 0x69, 0x7F, 0x6E, 0x7F, 0x20, 0x7F, 0x44, 0x7F, 0x6F, 0x7F, 0x6F, 0x7F,
	0x6D, 0x7F, 0x00, 0x70, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x41, 0x1F, 0x6E, 0x1F, 0x20, 0x1F, 0x65, 0x1F,
	0x72, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x72, 0x1F, 0x20, 0x1F, 0x68, 0x1F, 0x61, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x6F, 0x1F, 0x63, 0x1F, 0x63, 0x1F, 0x75, 0x1F, 0x72, 0x1F, 0x65, 0x1F, 0x64, 0x1F,
	0x2E, 0x1F, 0x20, 0x1F, 0x48, 0x1F, 0x6F, 0x1F, 0x77, 0x1F, 0x20, 0x1F, 0x61, 0x1F, 0x62, 0x1F,
	0x6F, 0x1F, 0x75, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x61, 0x1F, 0x74, 0x1F,
	0x2E, 0x1F, 0x20, 0x1F, 0x49, 0x1F, 0x74, 0x1F, 0x27, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x70, 0x1F,
	0x72, 0x1F, 0x6F, 0x1F, 0x62, 0x1F, 0x61, 0x1F, 0x62, 0x1F, 0x6C, 0x1F, 0x79, 0x1F, 0x20, 0x1F,
	0x74, 0x1F, 0x69, 0x1F, 0x6D, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F,
	0x72, 0x1F, 0x65, 0x1F, 0x73, 0x1F, 0x74, 0x1F, 0x61, 0x1F, 0x72, 0x1F, 0x74, 0x1F, 0x20, 0x1F,
	0x74, 0x1F, 0x68, 0x1F, 0x65, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x70, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x67, 0x1F,
	0x72, 0x1F, 0x61, 0x1F, 0x6D, 0x1F, 0x2E, 0x1F, 0x20, 0x1F, 0x42, 0x1F, 0x65, 0x1F, 0x20, 0x1F,
	0x73, 0x1F, 0x75, 0x1F, 0x72, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F,
	0x73, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x70, 0x1F, 0x20, 0x1F, 0x62, 0x1F, 0x79, 0x1F, 0x20, 0x1F,
	0x68, 0x1F, 0x74, 0x1F, 0x74, 0x1F, 0x70, 0x1F, 0x73, 0x1F, 0x3A, 0x1F, 0x2F, 0x1F, 0x2F, 0x1F,
	0x77, 0x1F, 0x77, 0x1F, 0x77, 0x1F, 0x2E, 0x1F, 0x67, 0x1F, 0x69, 0x1F, 0x74, 0x1F, 0x68, 0x1F,
	0x75, 0x1F, 0x62, 0x1F, 0x2E, 0x1F, 0x63, 0x1F, 0x6F, 0x1F, 0x6D, 0x1F, 0x2F, 0x1F, 0x72, 0x1F,
	0x75, 0x1F, 0x6D, 0x1F, 0x2D, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x64, 0x1F, 0x2D, 0x1F, 0x72, 0x1F,
	0x61, 0x1F, 0x69, 0x1F, 0x73, 0x1F, 0x69, 0x1F, 0x6E, 0x1F, 0x2D, 0x1F, 0x64, 0x1F, 0x6F, 0x1F,
	0x6F, 0x1F, 0x6D, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x69, 0x1F, 0x66, 0x1F, 0x20, 0x1F, 0x79, 0x1F,
	0x6F, 0x1F, 0x75, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x6E, 0x1F, 0x6B, 0x1F,
	0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x69, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x61, 0x1F, 0x20, 0x1F, 0x62, 0x1F, 0x75, 0x1F, 0x67, 0x1F, 0x2E, 0x1F, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x2A, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x50, 0x1F,
	0x72, 0x1F, 0x65, 0x1F, 0x73, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x79, 0x1F,
	0x20, 0x1F, 0x6B, 0x1F, 0x65, 0x1F, 0x79, 0x1F, 0x20, 0x1F, 0x66, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x20, 0x1F, 0x6E, 0x1F, 0x6F, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x6E, 0x1F, 0x67, 0x1F,
	0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F, 0x68, 0x1F, 0x61, 0x1F, 0x70, 0x1F, 0x70, 0x1F,
	0x65, 0x1F, 0x6E, 0x1F, 0x2E, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x2A, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x50, 0x1F,
	0x72, 0x1F, 0x65, 0x1F, 0x73, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x22, 0x1F, 0x4F, 0x1F, 0x6B, 0x1F,
	0x61, 0x1F, 0x79, 0x1F, 0x22, 0x1F, 0x20, 0x1F, 0x6F, 0x1F, 0x6E, 0x1F, 0x20, 0x1F, 0x74, 0x1F,
	0x68, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x62, 0x1F, 0x6F, 0x1F, 0x78, 0x1F, 0x20, 0x1F, 0x74, 0x1F,
	0x68, 0x1F, 0x61, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x70, 0x1F, 0x6F, 0x1F, 0x70, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x75, 0x1F, 0x70, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F, 0x71, 0x1F,
	0x75, 0x1F, 0x69, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x70, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x67, 0x1F, 0x72, 0x1F, 0x61, 0x1F, 0x6D, 0x1F,
	0x20, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x64, 0x1F, 0x20, 0x1F, 0x66, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x67, 0x1F, 0x65, 0x1F, 0x74, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x74, 0x1F,
	0x68, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x65, 0x1F, 0x72, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x20, 0x1F, 0x65, 0x1F, 0x76, 0x1F, 0x65, 0x1F, 0x72, 0x1F, 0x20, 0x1F, 0x65, 0x1F, 0x78, 0x1F,
	0x69, 0x1F, 0x73, 0x1F, 0x74, 0x1F, 0x65, 0x1F, 0x64, 0x1F, 0x2E, 0x1F, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x4C, 0x1F, 0x6F, 0x1F, 0x6F, 0x1F, 0x6B, 0x1F,
	0x20, 0x1F, 0x61, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x73, 0x1F, 0x63, 0x1F, 0x72, 0x1F, 0x65, 0x1F, 0x65, 0x1F, 0x6E, 0x1F, 0x20, 0x1F,
	0x73, 0x1F, 0x6F, 0x1F, 0x6D, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x6D, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x65, 0x1F, 0x20, 0x1F, 0x69, 0x1F, 0x66, 0x1F, 0x20, 0x1F, 0x79, 0x1F, 0x6F, 0x1F, 0x75, 0x1F,
	0x20, 0x1F, 0x77, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x74, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
};

using semaphore = std::counting_semaphore< 1 >;

static std::thread*								error_thread;
static semaphore*								error_posted;
static semaphore*								error_wait;
static AtomicCircularQueue< const char* >*		error_queue;

constexpr size_t								BufferSize = 4096;
thread_local bool								is_main_thread;
thread_local char								error_message_buffer[ BufferSize ];

#if defined( WIN32 )
	#include <excpt.h>
	// Until I fix up the boolean redefinition mess, we'll forward declare the function we want from WinAPI
	DOOM_C_API __declspec( dllimport ) int __stdcall IsDebuggerPresent( void );
	DOOM_C_API __declspec( dllimport ) int __stdcall SetUnhandledExceptionFilter( void* filter );
	#define IsDebuggerAttached() IsDebuggerPresent()
#else
	#include <execinfo.h>
	// Needs a large chunk of code on Linux to work, but the intrinsic we pick should do things just fine
	#define SetUnhandledExceptionFilter( filter )
	#define IsDebuggerAttached() true
#endif

#ifdef __has_builtin
	#if __has_builtin( __builtin_debugtrap )
		#define DoDebugBreak() __builtin_debugtrap()
	#endif
#elif defined( _MSC_VER )
	#include <intrin.h>
	#define DoDebugBreak() __debugbreak()
#endif

#if !defined( DoDebugBreak )
	#include "signal.h"
	#if defined( SIGTRAP )
		#define DoDebugBreak() raise( SIGTRAP )
	#else
		#define DoDebugBreak() raise( SIGABRT )
	#endif
#endif 

void I_ErrorThread()
{
	error_posted->acquire();

	const char* firsterror = error_queue->access();

	if( !M_ParmExists( "-nogui" ) )
	{
		SDL_ShowSimpleMessageBox( SDL_MESSAGEBOX_ERROR, PACKAGE_STRING, firsterror, nullptr );
	}

	exit( -1 );
}

void I_PostError( const char* error )
{
	I_LogDebug( error );

	if( IsDebuggerAttached() )
	{
		DoDebugBreak();
	}

	if( is_main_thread )
	{
		I_TerminalSetMode( TM_ImmediateRender );
		memcpy( TXT_GetScreenData(), endoom_error, arrlen( endoom_error ) );
		I_TerminalRender();

		if( !M_ParmExists( "-nogui" ) )
		{
			SDL_ShowSimpleMessageBox( SDL_MESSAGEBOX_ERROR, PACKAGE_STRING, error, nullptr );
		}

		exit( -1 );
	}
	else
	{
		error_queue->push( error );
		error_posted->release();
		error_wait->acquire();
	}
}

void I_UnhandledUserException()
{
	try
	{
		std::rethrow_exception( std::current_exception() );
	}
	catch( const std::exception& e )
	{
		I_Error( e.what() );
	}
	catch( ... )
	{
		I_Error( "Unknown user exception" );
	}
}

int32_t I_UnhandledStructuredException()
{
	I_PostError( "Unknown structed exception" );
	return EXCEPTION_EXECUTE_HANDLER;
}

template< size_t _size >
class Scratchpad
{
public:
	Scratchpad()
		: curr( buffer )
	{
	}

	template< typename _ty >
	_ty* alloc( size_t num )
	{
		uint8_t* output = curr;
		curr += sizeof( _ty ) * num;
		return (_ty*)output;
	}

private:
	uint8_t			buffer[ _size ];
	uint8_t*		curr;
};

typedef struct callstack_s
{
	void**			frames;
	const char**	formatted;
	size_t			count;

	constexpr auto FormattedFrames() { return std::span( formatted, count ); }

} callstack_t;

thread_local Scratchpad< 8192 > callstack_buffer;

#ifdef WIN32
callstack_t GetCallstack()
{
	callstack_t output = { };

	return output;
}
#else
callstack_t GetCallstack()
{
	constexpr size_t NumFrames = 64;

	callstack_t output = { };

	output.frames = callstack_buffer.alloc< void* >( NumFrames );
	output.count = backtrace( output.frames, NumFrames );
	output.formatted = backtrace_symbols( output.frames, ouput.count );

	// Don't care about copying to scratchpad or freeing, we're crashing

	return output;
}
#endif // Platform specific GetCallstack()

void I_InitError( void )
{
	std::set_terminate( &I_UnhandledUserException );
	SetUnhandledExceptionFilter( &I_UnhandledStructuredException );

	is_main_thread = true;

	// The error thread exists to stop multiple threads spamming
	// popup boxes. Only the first one will be considered for the
	// message box
	error_queue = new AtomicCircularQueue< const char* >( 512 );
	error_posted = new semaphore( 0 );
	error_wait = new semaphore( 0 );

	error_thread = new std::thread( [] { I_ErrorThread(); } );
}

void I_Error( const char *error, ... )
{
	va_list argptr;

	// Write a copy of the message into buffer.
	va_start( argptr, error );
	memset( error_message_buffer, 0, sizeof( error_message_buffer ) );
	M_vsnprintf( error_message_buffer, sizeof( error_message_buffer ), error, argptr );
	va_end( argptr );

	callstack_t callstack = GetCallstack();

	M_StringConcat( error_message_buffer, "\n\nCallstack:\n\n  ", sizeof( error_message_buffer ) );
	for( const char* formatted : callstack.FormattedFrames() )
	{
		M_StringConcat( error_message_buffer, formatted, sizeof( error_message_buffer ) );
		M_StringConcat( error_message_buffer, "\n  ", sizeof( error_message_buffer ) );
	}

	I_PostError( error_message_buffer );
}
