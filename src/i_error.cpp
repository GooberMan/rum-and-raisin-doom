//
// Copyright(C) 1993-1996 Id Software, Inc.
// Copyright(C) 2005-2014 Simon Howard
// Copyright(C) 2020-2022 Ethan Watson
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//

#include "i_error.h"

#include "i_log.h"
#include "i_system.h"
#include "i_terminal.h"
#include "i_video.h"

#include "m_argv.h"
#include "m_container.h"
#include "m_misc.h"

#include <SDL2/SDL.h>

#include <exception>
#include <atomic>
#include <semaphore>
#include <thread>

static uint8_t endoom_error[] =
{
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F,
	0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x7F, 0x52, 0x7F, 0x75, 0x7F,
	0x6D, 0x7F, 0x20, 0x7F, 0x61, 0x7F, 0x6E, 0x7F, 0x64, 0x7F, 0x20, 0x7F, 0x52, 0x7F, 0x61, 0x7F,
	0x69, 0x7F, 0x73, 0x7F, 0x69, 0x7F, 0x6E, 0x7F, 0x20, 0x7F, 0x44, 0x7F, 0x6F, 0x7F, 0x6F, 0x7F,
	0x6D, 0x7F, 0x00, 0x70, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x41, 0x1F, 0x6E, 0x1F, 0x20, 0x1F, 0x65, 0x1F,
	0x72, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x72, 0x1F, 0x20, 0x1F, 0x68, 0x1F, 0x61, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x6F, 0x1F, 0x63, 0x1F, 0x63, 0x1F, 0x75, 0x1F, 0x72, 0x1F, 0x65, 0x1F, 0x64, 0x1F,
	0x2E, 0x1F, 0x20, 0x1F, 0x48, 0x1F, 0x6F, 0x1F, 0x77, 0x1F, 0x20, 0x1F, 0x61, 0x1F, 0x62, 0x1F,
	0x6F, 0x1F, 0x75, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x61, 0x1F, 0x74, 0x1F,
	0x2E, 0x1F, 0x20, 0x1F, 0x49, 0x1F, 0x74, 0x1F, 0x27, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x70, 0x1F,
	0x72, 0x1F, 0x6F, 0x1F, 0x62, 0x1F, 0x61, 0x1F, 0x62, 0x1F, 0x6C, 0x1F, 0x79, 0x1F, 0x20, 0x1F,
	0x74, 0x1F, 0x69, 0x1F, 0x6D, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F,
	0x72, 0x1F, 0x65, 0x1F, 0x73, 0x1F, 0x74, 0x1F, 0x61, 0x1F, 0x72, 0x1F, 0x74, 0x1F, 0x20, 0x1F,
	0x74, 0x1F, 0x68, 0x1F, 0x65, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x70, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x67, 0x1F,
	0x72, 0x1F, 0x61, 0x1F, 0x6D, 0x1F, 0x2E, 0x1F, 0x20, 0x1F, 0x42, 0x1F, 0x65, 0x1F, 0x20, 0x1F,
	0x73, 0x1F, 0x75, 0x1F, 0x72, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F,
	0x73, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x70, 0x1F, 0x20, 0x1F, 0x62, 0x1F, 0x79, 0x1F, 0x20, 0x1F,
	0x68, 0x1F, 0x74, 0x1F, 0x74, 0x1F, 0x70, 0x1F, 0x73, 0x1F, 0x3A, 0x1F, 0x2F, 0x1F, 0x2F, 0x1F,
	0x77, 0x1F, 0x77, 0x1F, 0x77, 0x1F, 0x2E, 0x1F, 0x67, 0x1F, 0x69, 0x1F, 0x74, 0x1F, 0x68, 0x1F,
	0x75, 0x1F, 0x62, 0x1F, 0x2E, 0x1F, 0x63, 0x1F, 0x6F, 0x1F, 0x6D, 0x1F, 0x2F, 0x1F, 0x72, 0x1F,
	0x75, 0x1F, 0x6D, 0x1F, 0x2D, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x64, 0x1F, 0x2D, 0x1F, 0x72, 0x1F,
	0x61, 0x1F, 0x69, 0x1F, 0x73, 0x1F, 0x69, 0x1F, 0x6E, 0x1F, 0x2D, 0x1F, 0x64, 0x1F, 0x6F, 0x1F,
	0x6F, 0x1F, 0x6D, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x69, 0x1F, 0x66, 0x1F, 0x20, 0x1F, 0x79, 0x1F,
	0x6F, 0x1F, 0x75, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x6E, 0x1F, 0x6B, 0x1F,
	0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x69, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x61, 0x1F, 0x20, 0x1F, 0x62, 0x1F, 0x75, 0x1F, 0x67, 0x1F, 0x2E, 0x1F, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x2A, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x50, 0x1F,
	0x72, 0x1F, 0x65, 0x1F, 0x73, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x79, 0x1F,
	0x20, 0x1F, 0x6B, 0x1F, 0x65, 0x1F, 0x79, 0x1F, 0x20, 0x1F, 0x66, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x20, 0x1F, 0x6E, 0x1F, 0x6F, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x6E, 0x1F, 0x67, 0x1F,
	0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F, 0x68, 0x1F, 0x61, 0x1F, 0x70, 0x1F, 0x70, 0x1F,
	0x65, 0x1F, 0x6E, 0x1F, 0x2E, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x2A, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x50, 0x1F,
	0x72, 0x1F, 0x65, 0x1F, 0x73, 0x1F, 0x73, 0x1F, 0x20, 0x1F, 0x22, 0x1F, 0x4F, 0x1F, 0x6B, 0x1F,
	0x61, 0x1F, 0x79, 0x1F, 0x22, 0x1F, 0x20, 0x1F, 0x6F, 0x1F, 0x6E, 0x1F, 0x20, 0x1F, 0x74, 0x1F,
	0x68, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x62, 0x1F, 0x6F, 0x1F, 0x78, 0x1F, 0x20, 0x1F, 0x74, 0x1F,
	0x68, 0x1F, 0x61, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x70, 0x1F, 0x6F, 0x1F, 0x70, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x75, 0x1F, 0x70, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x6F, 0x1F, 0x20, 0x1F, 0x71, 0x1F,
	0x75, 0x1F, 0x69, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x70, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x67, 0x1F, 0x72, 0x1F, 0x61, 0x1F, 0x6D, 0x1F,
	0x20, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x64, 0x1F, 0x20, 0x1F, 0x66, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x67, 0x1F, 0x65, 0x1F, 0x74, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x74, 0x1F,
	0x68, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x65, 0x1F, 0x72, 0x1F, 0x72, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x20, 0x1F, 0x65, 0x1F, 0x76, 0x1F, 0x65, 0x1F, 0x72, 0x1F, 0x20, 0x1F, 0x65, 0x1F, 0x78, 0x1F,
	0x69, 0x1F, 0x73, 0x1F, 0x74, 0x1F, 0x65, 0x1F, 0x64, 0x1F, 0x2E, 0x1F, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F,
	0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x20, 0x1F, 0x4C, 0x1F, 0x6F, 0x1F, 0x6F, 0x1F, 0x6B, 0x1F,
	0x20, 0x1F, 0x61, 0x1F, 0x74, 0x1F, 0x20, 0x1F, 0x74, 0x1F, 0x68, 0x1F, 0x69, 0x1F, 0x73, 0x1F,
	0x20, 0x1F, 0x73, 0x1F, 0x63, 0x1F, 0x72, 0x1F, 0x65, 0x1F, 0x65, 0x1F, 0x6E, 0x1F, 0x20, 0x1F,
	0x73, 0x1F, 0x6F, 0x1F, 0x6D, 0x1F, 0x65, 0x1F, 0x20, 0x1F, 0x6D, 0x1F, 0x6F, 0x1F, 0x72, 0x1F,
	0x65, 0x1F, 0x20, 0x1F, 0x69, 0x1F, 0x66, 0x1F, 0x20, 0x1F, 0x79, 0x1F, 0x6F, 0x1F, 0x75, 0x1F,
	0x20, 0x1F, 0x77, 0x1F, 0x61, 0x1F, 0x6E, 0x1F, 0x74, 0x1F, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
	0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
};

template< size_t _size >
class Scratchpad
{
public:
	Scratchpad()
		: curr( buffer )
	{
	}

	template< typename _ty >
	_ty* alloc( size_t num )
	{
		uint8_t* output = curr;
		curr += sizeof( _ty ) * num;
		return (_ty*)output;
	}

private:
	uint8_t			buffer[ _size ];
	uint8_t*		curr;
};

typedef struct callstack_s
{
	void**			frames;
	const char**	formatted;
	size_t			count;

	constexpr auto FormattedFrames() { return std::span( formatted, count ); }

} callstack_t;

using semaphore = std::counting_semaphore< 1 >;

static semaphore*								error_wait;
static AtomicCircularQueue< const char* >*		error_queue;

thread_local bool								error_super_bad;

constexpr size_t								BufferSize = 4096;
thread_local bool								is_main_thread;
thread_local char								error_message_buffer[ BufferSize ];

thread_local Scratchpad< 8192 >					callstack_buffer;

#ifdef WIN32
	#define WIN32_LEAN_AND_MEAN
	#include <excpt.h>
	#include <Windows.h>
	#include <DbgHelp.h>

	#include <SDL2/SDL_syswm.h>

	#define IsDebuggerAttached() IsDebuggerPresent()
	#define CALLSTACK_MESSAGE " (CTRL+C to copy)"

	thread_local SDL_SysWMinfo WMInfo = {};
#else
	#include <execinfo.h>
	// Needs a large chunk of code on Linux to work, but the intrinsic we pick should do things just fine
	#define SetUnhandledExceptionFilter( filter )
	#define IsDebuggerAttached() true
	#define CALLSTACK_MESSAGE
#endif

#ifdef __has_builtin
	#if __has_builtin( __builtin_debugtrap )
		#define DoDebugBreak() __builtin_debugtrap()
	#endif
#elif defined( _MSC_VER )
	#include <intrin.h>
	#define DoDebugBreak() __debugbreak()
#endif

#if !defined( DoDebugBreak )
	#include "signal.h"
	#if defined( SIGTRAP )
		#define DoDebugBreak() raise( SIGTRAP )
	#else
		#define DoDebugBreak() raise( SIGABRT )
	#endif
#endif 

void I_DoErrorBox( const char* error )
{
#ifdef WIN32
	if( !error_super_bad )
	{
		SDL_VERSION( &WMInfo.version );
		SDL_GetWindowWMInfo( I_GetWindow(), &WMInfo );
	}

	MessageBox( WMInfo.info.win.window, error, PACKAGE_STRING " fatal error", MB_OK | MB_ICONERROR | MB_APPLMODAL );
#else
	SDL_ShowSimpleMessageBox( SDL_MESSAGEBOX_ERROR, PACKAGE_STRING, error, nullptr );
#endif
}

void I_PostError( const char* error )
{
	I_LogDebug( error );

	if( IsDebuggerAttached() )
	{
		DoDebugBreak();
	}

	if( is_main_thread )
	{
		if( !error_super_bad )
		{
			I_TerminalSetMode( TM_ImmediateRender );
			memcpy( TXT_GetScreenData(), endoom_error, arrlen( endoom_error ) );
			I_TerminalRender();
		}

		if( !M_ParmExists( "-nogui" ) )
		{
			I_DoErrorBox( error );
		}

		exit( -1 );
	}
	else
	{
		error_queue->push( error );
		error_wait->acquire();
	}
}

static bool no_update = false;

DOOM_C_API void I_ErrorUpdate( void )
{
	if( !is_main_thread )
	{
		I_PostError( "Attempting to I_ErrorUpdate on a thread other than main." );

		exit( -1 );
	}

	if( !no_update && !error_queue->empty() )
	{
		no_update = true;
		const char* firsterror = error_queue->access();

		I_PostError( firsterror );

		exit( -1 );
	}
}


#ifdef WIN32
callstack_t GetCallstack( CONTEXT* capturecontext = nullptr )
{
	constexpr size_t NumFrames = 64;
	
	callstack_t output = { };

	constexpr DWORD Machine = PLATFORM_ARCH == PLATFORM_ARCH_x64 ? IMAGE_FILE_MACHINE_AMD64 : IMAGE_FILE_MACHINE_I386;

	HANDLE currprocess = GetCurrentProcess();
	HANDLE currthread = GetCurrentThread();

	CONTEXT currcontext = { };
	if( !capturecontext )
	{
		currcontext.ContextFlags = CONTEXT_ALL;
		RtlCaptureContext( &currcontext );
		capturecontext = &currcontext;
	}

	STACKFRAME stackframe;
	stackframe.AddrPC.Mode = AddrModeFlat;
	stackframe.AddrFrame.Mode = AddrModeFlat;
	stackframe.AddrStack.Mode = AddrModeFlat;
#if PLATFORM_ARCH == PLATFORM_ARCH_x64
	{
		stackframe.AddrPC.Offset = capturecontext->Rip;
		stackframe.AddrFrame.Offset = capturecontext->Rbp;
		stackframe.AddrStack.Offset = capturecontext->Rsp;
	}
#elif PLATFORM_ARCH == PLATFORM_ARCH_x86
	{
		stackframe.AddrPC.Offset = capturecontext->Eip;
		stackframe.AddrFrame.Offset = capturecontext->Ebp;
		stackframe.AddrStack.Offset = capturecontext->Esp;
	}
#else
	#error "We don't support Windows ARM yet"
#endif

	output.frames = callstack_buffer.alloc< void* >( NumFrames );
	output.formatted = callstack_buffer.alloc< const char* >( NumFrames );

	while( output.count < NumFrames && StackWalk( Machine, currprocess, currthread, &stackframe, capturecontext , NULL, SymFunctionTableAccess, SymGetModuleBase, NULL ) )
	{
		output.frames[ output.count ] = (void*)stackframe.AddrPC.Offset;

		using NativeDWORD = decltype( SymGetModuleBase( currprocess, stackframe.AddrPC.Offset ) );

		constexpr size_t SymbolMaxLength = 512;
		PIMAGEHLP_SYMBOL symbol = (PIMAGEHLP_SYMBOL)callstack_buffer.alloc< uint8_t >( sizeof( IMAGEHLP_SYMBOL ) + SymbolMaxLength );
		symbol->SizeOfStruct = sizeof( SYMBOL_INFO ) + SymbolMaxLength;
		symbol->MaxNameLength = SymbolMaxLength - 2;
		NativeDWORD displacement = 0;
		BOOL gotname = SymGetSymFromAddr( currprocess, stackframe.AddrPC.Offset, &displacement, symbol );
		if( symbol->Name[ 0 ] == '?' )
		{
			output.formatted[ output.count ] = symbol->Name + 1;
			char* curr = symbol->Name + 1;
			while( *curr != '@' && *curr != 0 )
			{
				++curr;
			}
			*curr = 0;
		}
		else
		{
			output.formatted[ output.count ] = symbol->Name;
		}

		IMAGEHLP_LINE line;
		line.SizeOfStruct = sizeof(IMAGEHLP_LINE);
		DWORD linedisplacement = 0;
		BOOL gotline = SymGetLineFromAddr( currprocess, stackframe.AddrPC.Offset, &linedisplacement, &line );

		const char* filename = M_BaseName( line.FileName );

		size_t buffersize = M_snprintf( nullptr, 0, ">%s(%d): %s", filename, line.LineNumber, output.formatted[ output.count ] ) + 1;
		char* buffer = callstack_buffer.alloc< char >( buffersize );
		M_snprintf( buffer, buffersize, ">%s(%d): %s", filename, line.LineNumber, output.formatted[ output.count ] );

		output.formatted[ output.count ] = buffer;

		++output.count;
	}

	return output;
}
#else
callstack_t GetCallstack()
{
	constexpr size_t NumFrames = 64;

	callstack_t output = { };

	output.frames = callstack_buffer.alloc< void* >( NumFrames );
	output.count = backtrace( output.frames, NumFrames );
	output.formatted = (const char**)backtrace_symbols( output.frames, output.count );

	// Don't care about copying to scratchpad or freeing, we're crashing

	return output;
}
#endif // Platform specific GetCallstack()

void I_UnhandledUserException()
{
	error_super_bad = true;
	
	I_DoErrorBox( "Unhandled exception. Press okay to capture callstack." );

	try
	{
		std::rethrow_exception( std::current_exception() );
	}
	catch( const std::exception& e )
	{
		I_Error( e.what() );
	}
	catch( ... )
	{
		I_Error( "Unknown user exception" );
	}
}

#ifdef WIN32
int32_t I_UnhandledStructuredException()
{
	error_super_bad = true;

	I_DoErrorBox( "Unhandled exception. Press okay to capture callstack." );

	callstack_t callstack = GetCallstack();

	M_StringConcat( error_message_buffer, "Unhandled exception.\n\nCallstack" CALLSTACK_MESSAGE ":\n\n", sizeof( error_message_buffer ) );
	
	for( const char* formatted : callstack.FormattedFrames() )
	{
		M_StringConcat( error_message_buffer, formatted, sizeof( error_message_buffer ) );
		M_StringConcat( error_message_buffer, "\n", sizeof( error_message_buffer ) );
	}

	I_PostError( error_message_buffer );

	return EXCEPTION_EXECUTE_HANDLER;
}

DOOM_C_API void I_ErrorCleanup( void )
{
	SymCleanup( GetCurrentProcess() );
}
#endif // WIN32

void I_ErrorInit( void )
{
#if OS_CHECK( WINDOWS )
	SetUnhandledExceptionFilter( (LPTOP_LEVEL_EXCEPTION_FILTER)&I_UnhandledStructuredException );

	HANDLE currprocess = GetCurrentProcess();

	BOOL initialised = SymInitialize( currprocess, ".", TRUE );
	SymSetOptions( SYMOPT_CASE_INSENSITIVE | SYMOPT_LOAD_ANYTHING | SYMOPT_DEBUG );

	I_AtExit( &I_ErrorCleanup, true );
#endif OS_CHECK( WINDOWS )
	std::set_terminate( &I_UnhandledUserException );

	is_main_thread = true;

	// The error thread exists to stop multiple threads spamming
	// popup boxes. Only the first one will be considered for the
	// message box
	error_queue = new AtomicCircularQueue< const char* >( 512 );
	error_wait = new semaphore( 0 );
}

void I_Error( const char *error, ... )
{
	va_list argptr;

	// Write a copy of the message into buffer.
	va_start( argptr, error );
	M_vsnprintf( error_message_buffer, sizeof( error_message_buffer ), error, argptr );
	va_end( argptr );

	callstack_t callstack = GetCallstack();

	M_StringConcat( error_message_buffer, "\n\nCallstack" CALLSTACK_MESSAGE ":\n\n", sizeof( error_message_buffer ) );
	
	for( const char* formatted : callstack.FormattedFrames() )
	{
		M_StringConcat( error_message_buffer, formatted, sizeof( error_message_buffer ) );
		M_StringConcat( error_message_buffer, "\n", sizeof( error_message_buffer ) );
	}

	I_PostError( error_message_buffer );

	exit( -1 );
}
